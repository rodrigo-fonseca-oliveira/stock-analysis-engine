apiVersion: apps/v1
kind: Deployment
metadata:
  name: engine
  labels:
    app: engine
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    layer: backend
    messaging: redis
    cache: redis
    pubsub: publisher
  annotations:
    description: Stock Analysis Distributed Engine Worker Pod
    runtime: python3
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: engine
      app.kubernetes.io/version: {{ .Values.operatorVersion }}
  strategy:
    type: Recreate
  template:
    metadata:
      {{- if and .Values.metrics .Values.metrics.enabled }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.metrics.port }}"
        prometheus.io/path: {{ .Values.metrics.endpoint }}
      {{- end }}
      labels:
        app.kubernetes.io/name: engine
        app.kubernetes.io/version: {{ .Release.Version }}
        release: {{ .Release.Name }}
      initializers:
        pending: []
    spec:
      {{- if and .Values.engine.label (ne .Values.engine.label "") }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: engine
                operator: In
                values:
                - enabled
      {{- end }}
      {{- if .Values.engine.image.private }}
      imagePullSecrets:
      - name: {{ .Values.registry.imagePullSecrets }}
      {{- end }}
      containers:
      - name: engine
        image: "{{ .Values.registry.address }}/{{ .Values.engine.image.name }}:{{ .Values.engine.image.tag }}"
        imagePullPolicy: {{ .Values.engine.image.pullPolicy }}
        {{- if .Values.metrics.enabled }}
        ports:
          - containerPort: {{ .Values.metrics.port }}
        {{- end }}
        restartPolicy: Always
        resources: {}
        command:
        - /bin/bash
        - -c
        - cd /opt/sa/ &&
          . /opt/venv/bin/activate &&
          /opt/sa/start-workers.sh {{ .Values.engine.numWorkers }}
        env:
        {{- if and .Values.engine.s3.enabled (eq .Values.engine.s3.name "minio") }}
        - name: S3_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3_minio.secretName }}
              key: accessKey
        - name: S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3_minio.secretName }}
              key: secretKey
        - name: S3_ADDRESS
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3_minio.secretName }}
              key: address
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3_minio.secretName }}
              key: accessKey
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3_minio.secretName }}
              key: secretKey
        - name: S3_REGION_NAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3_minio.secretName }}
              key: region
        {{- end }}
        {{- if and .Values.engine.s3.enabled (eq .Values.engine.s3.name "aws") }}
        - name: S3_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3_aws.secretName }}
              key: accessKey
        - name: S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3_aws.secretName }}
              key: secretKey
        - name: S3_ADDRESS
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3_aws.secretName }}
              key: address
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3_aws.secretName }}
              key: accessKey
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3_aws.secretName }}
              key: secretKey
        - name: S3_REGION_NAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3_aws.secretName }}
              key: region
        {{- end }}
        {{ if and .Values.engine.slack .Values.engine.slack.enabled }}
        # set to your Slack webhook url:
        - name: SLACK_WEBHOOK
          valueFrom:
            secretKeyRef:
              name: {{ .Values.slack.secretName }}
              key: webhook
        # set to "1" to enable publishing to slack when
        # each ticker's job completes
        - name: DATASET_COLLECTION_SLACK_ALERTS
          valueFrom:
            secretKeyRef:
              name: {{ .Values.slack.secretName }}
              key: dataAlerts
        # set to "1" to enable publishing to slack when
        # set to "1" to publish Celery task failures to Slack
        - name: PROD_SLACK_ALERTS
          valueFrom:
            secretKeyRef:
              name: {{ .Values.slack.secretName }}
              key: prodAlerts
        # set to "1" to enable publishing to slack when
        {{ end }}
        {{ if and .Values.engine.iex .Values.engine.iex.enabled }}
        # IEX Account Config
        - name: IEX_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ .Values.iex.secretName }}
              key: token
        - name: IEX_API_VERSION
          valueFrom:
            secretKeyRef:
              name: {{ .Values.iex.secretName }}
              key: apiVersion
        {{ end }}
        {{ if and .Values.engine.tradier .Values.engine.tradier.enabled }}
        # Tradier Account Config:
        - name: TD_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ .Values.tradier.secretName }}
              key: token
        - name: TD_ENDPOINT_API
          valueFrom:
            secretKeyRef:
              name: {{ .Values.tradier.secretName }}
              key: apiFQDN
        - name: TD_ENDPOINT_DATA
          valueFrom:
            secretKeyRef:
              name: {{ .Values.tradier.secretName }}
              key: endpointFQDN
        - name: TD_ENDPOINT_STREAM
          valueFrom:
            secretKeyRef:
              name: {{ .Values.tradier.secretName }}
              key: streamFQDN
        {{ end }}
        - name: WORKER_BROKER_URL
          value: "redis://{{ .Values.redis.address }}/{{ .Values.redis.engineTaskDB }}"
        - name: WORKER_BACKEND_URL
          value: "redis://{{ .Values.redis.address }}/{{ .Values.redis.engineResultDB }}"
        - name: REDIS_ADDRESS
          value: {{ .Values.redis.address }}
        - name: REDIS_DB
          value: "{{ .Values.redis.pricingDB }}" 
